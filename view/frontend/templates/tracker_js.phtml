<?php

use Magento\Catalog\Api\Data\ProductInterface;
use Magento\Customer\Model\Customer;
use Magento\Framework\App\Config;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\Registry;
use Magento\Store\Model\ScopeInterface;

// todo: use block
$objectManager = ObjectManager::getInstance();

/** @var Config $config */
$config = $objectManager->get(Config::class);

// Get configuration.
$cnfIsEnabledPath = 'mailcampaigns_tracking/general/tracking_code';
$trackingCodeEnabled = $config->getValue($cnfIsEnabledPath, ScopeInterface::SCOPE_STORE) === '1';
$apiKey = $config->getValue('mailcampaigns_api/general/api_key', ScopeInterface::SCOPE_STORE);

// Only add the tracking script when enabled in config.
if ($trackingCodeEnabled) {
    $customer = $objectManager->create(Customer::class);
    $storeId = 0;

    // Get the store id from customer if possible.
    if ($customer->getId() > 0) {
        $storeId = (int)$customer->getStoreId();
    }

?>
    <script>
        window.addEventListener('load', function () {
            var d = document;
            var t = 'script';
            var apiKey = '<?=$apiKey?>';
            var storeId = <?=$storeId?>;
            var productId = null;
            var customerId = null;
            var mageCacheStorage = window.localStorage.getItem('mage-cache-storage');
            var recentlyViewedProductStorage = window.localStorage.getItem('recently_viewed_product');
            var sectionData = null;

            // Try to get the customer id from local storage.
            if (mageCacheStorage) {
                var mageCacheStorageDecoded = JSON.parse(mageCacheStorage);

                if (typeof mageCacheStorageDecoded['customer-id'] !== 'undefined') {
                    sectionData = mageCacheStorageDecoded['customer-id'];

                    if (typeof sectionData['customerId'] !== 'undefined') {
                        customerId = sectionData['customerId'];
                    }
                }
            }

            // Try to get the recently viewed product id from local storage.
            if (recentlyViewedProductStorage) {
                var recentlyViewedProductStorageDecoded = JSON.parse(recentlyViewedProductStorage);

                if (typeof recentlyViewedProductStorageDecoded === 'object') {
                    var props = Object.getOwnPropertyNames(recentlyViewedProductStorageDecoded);

                    if (typeof props[0] !== 'undefined') {
                        productId = props[0];
                    }
                }
            }

            // Build the request data.
            var reqData = btoa(JSON.stringify({
                store_id: storeId,
                product_id: productId,
                customer_id: customerId,
                visitor_id: 0
            }));

            // Create a new javascript element.
            var js = d.createElement(t);
            js.async = 1;
            js.src = `https://interface.mailcampaigns.nl/w/${apiKey}/${reqData}`;

            // Add element to the DOM.
            var s = d.getElementsByTagName(t)[0];
            s.parentNode.insertBefore(js, s);

            // Set cookie expiration date (~ a year).
            var cookieExp = new Date(Date.now() + 365 * 24 * 3600 * 1000).toString();

            // Save values received from the MailCampaigns server.
            if (typeof mc_session_id !== 'undefined') {
                d.cookie = `mc_session_id=${mc_session_id}; expires=${cookieExp}; path=/`
            }

            if (typeof mc_subscriber_id !== 'undefined') {
                d.cookie = `mc_subscriber_id=${mc_session_id}; expires=${cookieExp}; path=/`
            }

            if (typeof mc_subscriber_email !== 'undefined') {
                d.cookie = `mc_subscriber_email=${mc_session_id}; expires=${cookieExp}; path=/`
            }
        });
    </script>
<?php
}
